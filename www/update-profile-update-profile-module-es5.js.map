{"version":3,"sources":["src/app/update-profile/update-profile.page.html","src/app/update-profile/update-profile.module.ts","src/app/update-profile/update-profile.page.scss","src/app/update-profile/update-profile.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header no-border>\\n    <ion-toolbar color='primary'>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button></ion-back-button>\\n        </ion-buttons>\\n        <!-- <ion-buttons slot=\\\"start\\\">\\n            <ion-menu-button></ion-menu-button>\\n        </ion-buttons> -->\\n        <ion-title>\\n            Update Profile\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"update-profile-content\\\">\\n    <form [formGroup]=\\\"updateForm\\\" (ngSubmit)=\\\"updateProfile()\\\">\\n        <ion-list lines='full'>\\n            <!-- FULLNAME  -->\\n            <ion-item>\\n                <ion-label stacked>Fullname</ion-label>\\n                <ion-input type=\\\"text\\\" inputmode=\\\"text\\\" formControlName='fullname'></ion-input>\\n            </ion-item>\\n            <div class=\\\"error-container\\\">\\n                <ng-container *ngFor=\\\"let validation of validation_messages.fullname\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"updateForm.get('fullname').hasError(validation.type) && (updateForm.get('fullname').dirty || updateForm.get('fullname').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                        <span>{{ validation.message }}</span>\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- ESTATE NAME -->\\n            <ion-item>\\n                <ion-label stacked>Estate Name</ion-label>\\n                <ion-input type=\\\"text\\\" inputmode=\\\"text\\\" formControlName='estateName' readonly></ion-input>\\n                <!-- <ion-select placeholder=\\\"Select One\\\" formControlName='estateName' readonly>\\n                    <ion-select-option *ngFor='let estate of estates' value=\\\"{{estate.name}}\\\">{{estate.name}}</ion-select-option>\\n                </ion-select> -->\\n            </ion-item>\\n            <div class=\\\"error-container\\\">\\n                <ng-container *ngFor=\\\"let validation of validation_messages.estateName\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"updateForm.get('estateName').hasError(validation.type) && (updateForm.get('estateName').dirty || updateForm.get('estateName').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                        <span>{{ validation.message }}</span>\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- APARTMENT NUMBER -->\\n            <ion-item *ngIf='role !== \\\"security\\\"'>\\n                <ion-label stacked>Estate Apt Number</ion-label>\\n                <ion-input type=\\\"text\\\" inputmode=\\\"text\\\" formControlName='estateAptNum'></ion-input>\\n            </ion-item>\\n            <div class=\\\"error-container\\\">\\n                <ng-container *ngFor=\\\"let validation of validation_messages.estateAptNum\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"updateForm.get('estateAptNum').hasError(validation.type) && (updateForm.get('estateAptNum').dirty || updateForm.get('estateAptNum').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                        <span>{{ validation.message }}</span>\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- EMAIL -->\\n            <ion-item>\\n                <ion-label stacked>Email</ion-label>\\n                <ion-input type=\\\"email\\\" inputmode=\\\"email\\\" formControlName='email'></ion-input>\\n            </ion-item>\\n            <div class=\\\"error-container\\\">\\n                <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"updateForm.get('email').hasError(validation.type) && (updateForm.get('email').dirty || updateForm.get('email').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                        <span>{{ validation.message }}</span>\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- ADDRESS -->\\n            <ion-item>\\n                <ion-label stacked>Address</ion-label>\\n                <ion-input type=\\\"text\\\" inputmode=\\\"text\\\" formControlName='address'></ion-input>\\n            </ion-item>\\n            <div class=\\\"error-container\\\">\\n                <ng-container *ngFor=\\\"let validation of validation_messages.address\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"updateForm.get('address').hasError(validation.type) && (updateForm.get('address').dirty || updateForm.get('address').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                        <span>{{ validation.message }}</span>\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- GENDER -->\\n            <ion-item>\\n                <ion-label>Gender</ion-label>\\n                <ion-select placeholder=\\\"Select One\\\" formControlName='gender'>\\n                    <ion-select-option value=\\\"f\\\">Female</ion-select-option>\\n                    <ion-select-option value=\\\"m\\\">Male</ion-select-option>\\n                    <ion-select-option value=\\\"other\\\">Other</ion-select-option>\\n                </ion-select>\\n            </ion-item>\\n            <div class=\\\"error-container\\\">\\n                <ng-container *ngFor=\\\"let validation of validation_messages.gender\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"updateForm.get('gender').hasError(validation.type) && (updateForm.get('gender').dirty || updateForm.get('gender').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                        <span>{{ validation.message }}</span>\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- MARITAL STATUS -->\\n            <ion-item>\\n                <ion-label>Marital Status</ion-label>\\n                <ion-select placeholder=\\\"Select One\\\" formControlName='maritalStatus'>\\n                    <ion-select-option value=\\\"single\\\">Single</ion-select-option>\\n                    <ion-select-option value=\\\"married\\\">Married</ion-select-option>\\n                    <ion-select-option value=\\\"divorced\\\">Divorced</ion-select-option>\\n                </ion-select>\\n            </ion-item>\\n            <div class=\\\"error-container\\\">\\n                <ng-container *ngFor=\\\"let validation of validation_messages.maritalStatus\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"updateForm.get('maritalStatus').hasError(validation.type) && (updateForm.get('maritalStatus').dirty || updateForm.get('maritalStatus').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                        <span>{{ validation.message }}</span>\\n                    </div>\\n                </ng-container>\\n            </div>\\n            <!-- ABOUT -->\\n            <ion-item>\\n                <ion-label stacked>About</ion-label>\\n                <ion-input type=\\\"text\\\" inputmode=\\\"text\\\" formControlName='about'></ion-input>\\n            </ion-item>\\n            <div class=\\\"error-container\\\">\\n                <ng-container *ngFor=\\\"let validation of validation_messages.about\\\">\\n                    <div class=\\\"error-message\\\" *ngIf=\\\"updateForm.get('about').hasError(validation.type) && (updateForm.get('about').dirty || updateForm.get('about').touched)\\\">\\n                        <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                        <span>{{ validation.message }}</span>\\n                    </div>\\n                </ng-container>\\n            </div>\\n        </ion-list>\\n\\n        <ion-button type=\\\"submit\\\" expand='block' fill='solid' color='primary' [disabled]='!updateForm.valid || isLoading'>\\n            <ion-spinner name=\\\"crescent\\\" slot='start' *ngIf='isLoading'></ion-spinner>\\n            <ion-text *ngIf='!isLoading'>Update Profile</ion-text>\\n        </ion-button>\\n    </form>\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { UpdateProfilePage } from './update-profile.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UpdateProfilePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [UpdateProfilePage]\n})\nexport class UpdateProfilePageModule {}\n","export default \"ion-input {\\n  text-align: end !important;\\n}\\n\\n.error-container .error-message {\\n  margin: calc(var(--page-margin) / 2) 0px;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  color: var(--ion-color-danger);\\n  font-size: 14px;\\n}\\n\\n.error-container .error-message ion-icon {\\n  -webkit-padding-end: calc(var(--page-margin) / 2);\\n          padding-inline-end: calc(var(--page-margin) / 2);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9Ncl9Gcm9zaC9EZXNrdG9wL1NlY3VyZVBhc3Mvc3JjL2FwcC91cGRhdGUtcHJvZmlsZS91cGRhdGUtcHJvZmlsZS5wYWdlLnNjc3MiLCJzcmMvYXBwL3VwZGF0ZS1wcm9maWxlL3VwZGF0ZS1wcm9maWxlLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLDBCQUFBO0FDQ0o7O0FER0k7RUFDSSx3Q0FBQTtFQUNBLG9CQUFBO0VBQUEsYUFBQTtFQUNBLHlCQUFBO1VBQUEsbUJBQUE7RUFDQSw4QkFBQTtFQUNBLGVBQUE7QUNBUjs7QURDUTtFQUNJLGlEQUFBO1VBQUEsZ0RBQUE7QUNDWiIsImZpbGUiOiJzcmMvYXBwL3VwZGF0ZS1wcm9maWxlL3VwZGF0ZS1wcm9maWxlLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1pbnB1dCB7XG4gICAgdGV4dC1hbGlnbjogZW5kICFpbXBvcnRhbnQ7XG59XG5cbi5lcnJvci1jb250YWluZXIge1xuICAgIC5lcnJvci1tZXNzYWdlIHtcbiAgICAgICAgbWFyZ2luOiBjYWxjKHZhcigtLXBhZ2UtbWFyZ2luKSAvIDIpIDBweDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1kYW5nZXIpO1xuICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgIGlvbi1pY29uIHtcbiAgICAgICAgICAgIHBhZGRpbmctaW5saW5lLWVuZDogY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgLyAyKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpb24taW5wdXQge1xuICB0ZXh0LWFsaWduOiBlbmQgIWltcG9ydGFudDtcbn1cblxuLmVycm9yLWNvbnRhaW5lciAuZXJyb3ItbWVzc2FnZSB7XG4gIG1hcmdpbjogY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgLyAyKSAwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGNvbG9yOiB2YXIoLS1pb24tY29sb3ItZGFuZ2VyKTtcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuLmVycm9yLWNvbnRhaW5lciAuZXJyb3ItbWVzc2FnZSBpb24taWNvbiB7XG4gIHBhZGRpbmctaW5saW5lLWVuZDogY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgLyAyKTtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { HoaStoreService } from '../hoa-store.service';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\n@Component({\n  selector: 'app-update-profile',\n  templateUrl: './update-profile.page.html',\n  styleUrls: ['./update-profile.page.scss'],\n  providers: [HoaStoreService]\n})\nexport class UpdateProfilePage implements OnInit {\n      updateForm: FormGroup;\n      role =  window.localStorage.getItem('hoa-role');\n      validation_messages = {\n            'fullname': [\n                  { type: 'required', message: 'Fullname is required.' }\n            ],\n            'estateName': [\n                  { type: 'required', message: 'Estate Name is required.' }\n            ],\n            'estateAptNum': [\n                  { type: 'required', message: 'Apartment Number is required.' }\n            ],\n            'email': [\n              { type: 'required', message: 'Email is required.' },\n              { type: 'pattern', message: 'Enter a valid email.' }\n            ],\n            'address': [\n                  { type: 'required', message: 'Address is required.' }\n            ],\n            'gender': [\n                  { type: 'required', message: 'Please indicate a gender.' }\n            ],\n            'maritalStatus': [\n                  { type: 'required', message: 'This field is required.' }\n            ],\n            'about': [\n                  { type: 'required', message: 'A little about yourself.'}\n            ]\n          };\n      // estateName = '';\n      // estateAptNum = '';\n      // email = '';\n      // address = '';\n      // gender = '';\n      // maritalStatus = '';\n      // about = '';\n      // fullname = '';\n      estates: any[] = [];\n      isLoading = false;\n  constructor(private router: Router,\n              private store: HoaStoreService) {\n        this.getestates(); // get estates\n        this.getProfile(); // get profile for editing\n        this.updateForm = new FormGroup({\n            'fullname': new FormControl('', Validators.compose([\n                  Validators.required\n            ])),\n            'estateName': new FormControl('', Validators.compose([\n                  Validators.required\n            ])),\n            'estateAptNum': new FormControl('', Validators.compose([\n                  Validators.required\n            ])),\n            'email': new FormControl('', Validators.compose([\n              Validators.required,\n              Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n            ])),\n            'address': new FormControl('', Validators.compose([\n                  Validators.required\n            ])),\n            'gender': new FormControl('', Validators.compose([\n                  Validators.required\n            ])),\n            'maritalStatus': new FormControl('', Validators.compose([\n                  Validators.required\n            ])),\n            'about': new FormControl('', Validators.compose([\n                  Validators.required\n            ]))\n          });\n   }\n\nupdateProfile() {\n      this.isLoading = true;\n      // firebase.auth().currentUser.displayName = this.fullname;\n      const role = this.store.getItem('hoa-role').toString();\n      const uid = this.store.getItem('hoa-uid').toString();\n\n      firebase.database().ref(role).child(uid).update({\n            estateName: this.updateForm.get('estateName').value,\n            estateAptNum: this.updateForm.get('estateAptNum').value,\n            email: this.updateForm.get('email').value,\n            address: this.updateForm.get('address').value,\n            gender: this.updateForm.get('gender').value,\n            maritalStatus: this.updateForm.get('maritalStatus').value,\n            about: this.updateForm.get('about').value,\n            fullname: this.updateForm.get('fullname').value\n      }).then(() => {\n            console.log('User updated');\n            this.isLoading = false;\n            this.router.navigate(['app/user']);\n      }).catch((err: Error) => {\n            console.error(err.message);\n            this.isLoading = false;\n      });\n}\n\ngetestates() {\n      firebase.database().ref('Estates').once('value', (snapshot) => {\n            for (const key in snapshot.val()) {\n                  if (snapshot.val().hasOwnProperty(key)) {\n                        const estate = snapshot.val()[key];\n                        this.estates.push(estate);\n                  }\n            }\n      }, (err: Error) => {\n            console.error(err.message);\n      });\n}\n\ngetProfile() {\n      let role, uid;\n      role = this.store.getItem('hoa-role');\n      uid = this.store.getItem('hoa-uid');\n      firebase.database().ref(role).child(uid).once('value', (snapshot) => {\n            // SET INPUT TO APPROPRIATE SNAPSHOT VALUE\n            this.updateForm.get('fullname').setValue(snapshot.val().fullname || '');\n            this.updateForm.get('estateName').setValue(snapshot.val().estateName || '');\n            this.updateForm.get('estateAptNum').setValue(snapshot.val().estateAptNum || '');\n            this.updateForm.get('email').setValue(snapshot.val().email || '');\n            this.updateForm.get('address').setValue(snapshot.val().address || '');\n            this.updateForm.get('gender').setValue(snapshot.val().gender || '');\n            this.updateForm.get('maritalStatus').setValue(snapshot.val().maritalStatus || '');\n            this.updateForm.get('about').setValue(snapshot.val().about || '');\n            // this.profile = snapshot.val();\n            // this.visitors = [];\n            // this.dependents = [];\n            // GET DEPENDENT ON IF ROLE === DEPENDENT\n            // if (role === 'dependent') {\n            //       this.getDependentOn();\n            // }\n            // // GET VISITORS\n            // for (const key in snapshot.val().visitors) {\n            //       if (snapshot.val().visitors.hasOwnProperty(key)) {\n            //             const visitor = snapshot.val().visitors[key];\n            //             this.visitorsKeys.push(key);\n            //             this.visitors.push(visitor);\n            //             // firebase.database().ref(`${role}/${uid}/visitors`).child(key).on('value', snap => {\n            //             //       this.visitors.push(snap.val());\n            //             // });\n            //       }\n            // }\n            // // GET DEPENDENTS\n            // for (const key in snapshot.val().dependents) {\n            //       if (snapshot.val().dependents.hasOwnProperty(key)) {\n            //             const dependent = snapshot.val().dependents[key];\n            //             this.dependentsKeys.push(key);\n            //             this.dependents.push(dependent);\n            //             // firebase.database().ref(`${role}/${uid}/visitors`).child(key).on('value', snap => {\n            //             //       this.visitors.push(snap.val());\n            //             // });\n            //       }\n            // }\n      }).then(() => {\n            console.log('Profile retrieved successfully');\n      }).catch((err: Error) => {\n            console.error(err.message);\n      });\n  }\n\n  ngOnInit() {\n  }\n\n}\n"],"sourceRoot":"webpack:///","file":"update-profile-update-profile-module-es5.js"}